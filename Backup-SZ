begin
    # Helper: parse only numeric lines
    function load_numeric_matrix(filename)
        lines = readlines(filename)
        data = []
        for line in lines
            if isempty(line) || startswith(strip(line), "#")
                continue
            end
            push!(data, [parse(Float64, x) for x in split(strip(line), r"[,\s]+")])
        end
        return reduce(vcat, [reshape(row, 1, :) for row in data])
    end

    # --- Load conversion tables ---
    poly_pars = load_numeric_matrix("YrSZ2KCMB_polyfits.txt")
    Tconv = load_numeric_matrix("KCMB2MJysr.txt")[:, 1]
    yconv = load_numeric_matrix("KCMB2YSZ.txt")[:, 1]

    # --- Load band definitions and error bars ---
    bands = load_numeric_matrix("sensitivity_calculations.txt")
    band_inds = bands[:, 1]
    band_errs = bands[:, 6]  # sensitivity column for error bars
    nband = length(band_inds)

    # --- Set Compton y and electron temperature ---
    y = 1e-4           # Compton y parameter
    Te = 10.0          # Electron temperature in keV

    # --- Polynomial function for relativistic SZ ---
    function polynomial(coeffs, Te)
        sum(coeffs .* [Te^i for i in 0:(length(coeffs)-1)])
    end

    # --- Calculate SZ signal in each band ---
    SZsig = zeros(nband)
    nrSZsig = zeros(nband)
    for i in 1:nband
        SZsig[i] = polynomial(poly_pars[i, :], Te) * Tconv[i] * y
        nrSZsig[i] = 1.0 / yconv[i] * Tconv[i] * y
    end

    println("Relativistic SZ signal in each band: ", SZsig)
    println("Non-relativistic SZ signal in each band: ", nrSZsig)
    println("Band errors (from sensitivity column): ", band_errs)
	println(yconv)
	println(Tconv)

    # --- Plot with error bars ---
    plot(band_inds, SZsig; yerr=band_errs, label="Relativistic SZ", lw=2, marker=:circle, xlabel="Band Index", ylabel="SZ Signal [mJy/beam]", title="SZ Signal in Each Band")
    plot!(band_inds, nrSZsig; label="Non-relativistic SZ", lw=2, marker=:diamond)
	
end

begin
	# --- Compute chi² for non-relativistic and relativistic SZ using Te_10.0 files ---
	
	# Helper to load expected and error values from a two-column text file
	function load_expected_and_error(filename)
	    expected = Float64[]
	    errors = Float64[]
	    for line in eachline(filename)
	        if isempty(line) || startswith(strip(line), "#")
	            continue
	        end
	        vals = split(strip(line))
	        push!(expected, parse(Float64, vals[1]))
	        push!(errors, parse(Float64, vals[2]))
	    end
	    return expected, errors
	end
	
	# Load expected and error values
	nr_expected, nr_errors = load_expected_and_error("Te_10.0_tSZ_signal.txt")
	rel_expected, rel_errors = load_expected_and_error("Te_10.0_rSZ_signal.txt")
	
	# Generate observed values using the non-relativistic SZ model with y = 2e-4
	y_obs = 1.1e-4
	observed = [1.0 / yconv[i] * Tconv[i] * y_obs for i in 1:length(band_inds)]
	
	# Chi-squared function
	function chi2(observed, expected, errors)
	    sum((((observed .- expected).^2) ./ errors.^2))
	end
	
	# Compute chi²
	chi2_nr = chi2(observed, nr_expected, nr_errors)
	chi2_rel = chi2(observed, rel_expected, rel_errors)
	
	println("Chi² (Non-relativistic): ", chi2_nr)
	println("Chi² (Relativistic): ", chi2_rel)
end

begin
	NR_DOF = 9 - 1
	R_DOF = 9 - 2
    # Function to generate expected SZ signal for a given y (non-relativistic)
    function expected_nrSZ(y)
        [1.0 / yconv[i] * Tconv[i] * y for i in 1:length(band_inds)]
    end

    # Function to generate expected SZ signal for a given y and Te (relativistic)
    function expected_relSZ_2d(y, Te)
        [polynomial(poly_pars[i, :], Te) * Tconv[i] * y for i in 1:length(band_inds)]
    end

    # Function to add Gaussian noise to model data
    function add_noise_to_data(model_data, errorbars)
        return model_data .+ randn(length(model_data)) .* errorbars
    end

    # --- Minimize WITHOUT noise ---
    function chi2_model(y, expected_func, observed, errors)
        model = expected_func(y)
        sum(((model .- observed) ./ errors).^2)
    end

    result_nr = optimize(y -> chi2_model(y, expected_nrSZ, observed, nr_errors), 1e-6, 1e-3)
    best_y_nr = Optim.minimizer(result_nr)
    min_chi2_nr = Optim.minimum(result_nr)

    function chi2_rel_2d(params, observed, errors)
        y, Te = params
        model = expected_relSZ_2d(y, Te)
        sum(((model .- observed) ./ errors).^2)
    end
    initial_guess = [best_y_nr, 10.0]
    lower = [1e-6, 1.0]
    upper = [1e-3, 25.0]
    result_rel = optimize(params -> chi2_rel_2d(params, rel_expected, rel_errors), lower, upper, initial_guess, Fminbox())
    best_params_rel = Optim.minimizer(result_rel)
    best_y_rel, best_Te_rel = best_params_rel
    min_chi2_rel = Optim.minimum(result_rel)

    println("=== Results WITHOUT noise ===")
    println("Best-fit y (Non-relativistic): ", best_y_nr, ", min χ²: ", min_chi2_nr)
    println("Best-fit y (Relativistic): ", best_y_rel, ", Best-fit Te: ", best_Te_rel, ", min χ²: ", min_chi2_rel)

    # --- Minimize WITH noise (single realization) ---
    observed_noisy = add_noise_to_data(observed, nr_errors)
    rel_expected_noisy = add_noise_to_data(rel_expected, rel_errors)

    result_nr_noisy = optimize(y -> chi2_model(y, expected_nrSZ, observed_noisy, nr_errors), 1e-6, 1e-3)
    best_y_nr_noisy = Optim.minimizer(result_nr_noisy)
    min_chi2_nr_noisy = Optim.minimum(result_nr_noisy)

    result_rel_noisy = optimize(params -> chi2_rel_2d(params, rel_expected_noisy, rel_errors), lower, upper, [best_y_nr_noisy, 10.0], Fminbox())
    best_params_rel_noisy = Optim.minimizer(result_rel_noisy)
    best_y_rel_noisy, best_Te_rel_noisy = best_params_rel_noisy
    min_chi2_rel_noisy = Optim.minimum(result_rel_noisy)

    println("\n=== Results WITH noise (single iteration) ===")
    println("Best-fit y (Non-relativistic): ", best_y_nr_noisy, ", min χ²: ", min_chi2_nr_noisy)
    println("Best-fit y (Relativistic): ", best_y_rel_noisy, ", Best-fit Te: ", best_Te_rel_noisy, ", min χ²: ", min_chi2_rel_noisy)

    # --- Run experiment 100 times and average ---
    n_trials = 100
    y_nr_vals = zeros(n_trials)
    chi2_nr_vals = zeros(n_trials)
    y_rel_vals = zeros(n_trials)
    Te_rel_vals = zeros(n_trials)
    chi2_rel_vals = zeros(n_trials)

    for i in 1:n_trials
        obs_noisy = add_noise_to_data(observed, nr_errors)
        rel_noisy = add_noise_to_data(rel_expected, rel_errors)

        res_nr = optimize(y -> chi2_model(y, expected_nrSZ, obs_noisy, nr_errors), 1e-6, 1e-3)
        y_nr_vals[i] = Optim.minimizer(res_nr)
        chi2_nr_vals[i] = Optim.minimum(res_nr)

        res_rel = optimize(params -> chi2_rel_2d(params, rel_noisy, rel_errors), lower, upper, [y_nr_vals[i], 10.0], Fminbox())
        best_params = Optim.minimizer(res_rel)
        y_rel_vals[i], Te_rel_vals[i] = best_params
        chi2_rel_vals[i] = Optim.minimum(res_rel)
    end

    println("\n=== AVERAGE over $n_trials noise iterations ===")
    println("Non-relativistic: <y> = ", mean(y_nr_vals), ", <χ²> = ", mean(chi2_nr_vals))
    println("Relativistic: <y> = ", mean(y_rel_vals), ", <Te> = ", mean(Te_rel_vals), ", <χ²> = ", mean(chi2_rel_vals))
	println("\n=== AVERAGE over 100 noise iterations w. DOF ===")
	println("Non-relativistic: <y> = ", "<χ²> = ", (mean(chi2_nr_vals))/(NR_DOF))
	println("Relativistic: <y> = ", "<χ²> = ", (mean(chi2_rel_vals))/(R_DOF))
end

